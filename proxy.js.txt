export default async function handler(req, res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // Get secrets from Vercel environment variables (secure method)
  const DEVELOPER_TOKEN = process.env.DEVELOPER_TOKEN;
  const CLIENT_ID = process.env.CLIENT_ID;
  const CLIENT_SECRET = process.env.CLIENT_SECRET;
  const REFRESH_TOKEN = process.env.REFRESH_TOKEN;

  // Check if all required environment variables are set
  if (!DEVELOPER_TOKEN || !CLIENT_ID || !CLIENT_SECRET || !REFRESH_TOKEN) {
    return res.status(500).json({ 
      error: 'Missing required environment variables' 
    });
  }

  // Function to get fresh access token
  async function getAccessToken() {
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        client_id: CLIENT_ID,
        client_secret: CLIENT_SECRET,
        refresh_token: REFRESH_TOKEN,
        grant_type: 'refresh_token'
      })
    });
    const tokenData = await tokenResponse.json();
    return tokenData.access_token;
  }

  try {
    // Get customer ID from URL
    const pathParts = req.url.split('/');
    const customerIndex = pathParts.indexOf('customers');
    const customerId = pathParts[customerIndex + 1];
    
    // Get fresh access token automatically
    const accessToken = await getAccessToken();
    
    // Prepare request to Google Ads
    const headers = {
      'Authorization': `Bearer ${accessToken}`,
      'developer-token': DEVELOPER_TOKEN,
      'Content-Type': 'application/json',
    };

    if (customerId) {
      headers['customer-id'] = customerId;
    }

    // Send to Google Ads API
    const googleAdsUrl = `https://googleads.googleapis.com${req.url}`;
    const response = await fetch(googleAdsUrl, {
      method: req.method,
      headers: headers,
      body: req.method !== 'GET' ? JSON.stringify(req.body) : undefined,
    });

    const data = await response.json();
    res.status(response.status).json(data);

  } catch (error) {
    res.status(500).json({ 
      error: 'Proxy server error', 
      message: error.message 
    });
  }
}
